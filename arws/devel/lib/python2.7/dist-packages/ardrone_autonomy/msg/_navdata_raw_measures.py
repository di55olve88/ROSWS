# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ardrone_autonomy/navdata_raw_measures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class navdata_raw_measures(genpy.Message):
  _md5sum = "4da7145c7478d1eb84be4d5fa4acd9ca"
  _type = "ardrone_autonomy/navdata_raw_measures"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 drone_time
uint16 tag
uint16 size
int16[] raw_gyros
int16[] raw_gyros_110
uint32 vbat_raw
uint16 us_debut_echo
uint16 us_fin_echo
uint16 us_association_echo
uint16 us_distance_echo
uint16 us_courbe_temps
uint16 us_courbe_valeur
uint16 us_courbe_ref
uint16 flag_echo_ini
uint16 nb_echo
uint32 sum_echo
int32 alt_temp_raw
int16 gradient

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','drone_time','tag','size','raw_gyros','raw_gyros_110','vbat_raw','us_debut_echo','us_fin_echo','us_association_echo','us_distance_echo','us_courbe_temps','us_courbe_valeur','us_courbe_ref','flag_echo_ini','nb_echo','sum_echo','alt_temp_raw','gradient']
  _slot_types = ['std_msgs/Header','float64','uint16','uint16','int16[]','int16[]','uint32','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint32','int32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drone_time,tag,size,raw_gyros,raw_gyros_110,vbat_raw,us_debut_echo,us_fin_echo,us_association_echo,us_distance_echo,us_courbe_temps,us_courbe_valeur,us_courbe_ref,flag_echo_ini,nb_echo,sum_echo,alt_temp_raw,gradient

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navdata_raw_measures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drone_time is None:
        self.drone_time = 0.
      if self.tag is None:
        self.tag = 0
      if self.size is None:
        self.size = 0
      if self.raw_gyros is None:
        self.raw_gyros = []
      if self.raw_gyros_110 is None:
        self.raw_gyros_110 = []
      if self.vbat_raw is None:
        self.vbat_raw = 0
      if self.us_debut_echo is None:
        self.us_debut_echo = 0
      if self.us_fin_echo is None:
        self.us_fin_echo = 0
      if self.us_association_echo is None:
        self.us_association_echo = 0
      if self.us_distance_echo is None:
        self.us_distance_echo = 0
      if self.us_courbe_temps is None:
        self.us_courbe_temps = 0
      if self.us_courbe_valeur is None:
        self.us_courbe_valeur = 0
      if self.us_courbe_ref is None:
        self.us_courbe_ref = 0
      if self.flag_echo_ini is None:
        self.flag_echo_ini = 0
      if self.nb_echo is None:
        self.nb_echo = 0
      if self.sum_echo is None:
        self.sum_echo = 0
      if self.alt_temp_raw is None:
        self.alt_temp_raw = 0
      if self.gradient is None:
        self.gradient = 0
    else:
      self.header = std_msgs.msg.Header()
      self.drone_time = 0.
      self.tag = 0
      self.size = 0
      self.raw_gyros = []
      self.raw_gyros_110 = []
      self.vbat_raw = 0
      self.us_debut_echo = 0
      self.us_fin_echo = 0
      self.us_association_echo = 0
      self.us_distance_echo = 0
      self.us_courbe_temps = 0
      self.us_courbe_valeur = 0
      self.us_courbe_ref = 0
      self.flag_echo_ini = 0
      self.nb_echo = 0
      self.sum_echo = 0
      self.alt_temp_raw = 0
      self.gradient = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d2H.pack(_x.drone_time, _x.tag, _x.size))
      length = len(self.raw_gyros)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.raw_gyros))
      length = len(self.raw_gyros_110)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.raw_gyros_110))
      _x = self
      buff.write(_struct_I9HIih.pack(_x.vbat_raw, _x.us_debut_echo, _x.us_fin_echo, _x.us_association_echo, _x.us_distance_echo, _x.us_courbe_temps, _x.us_courbe_valeur, _x.us_courbe_ref, _x.flag_echo_ini, _x.nb_echo, _x.sum_echo, _x.alt_temp_raw, _x.gradient))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.drone_time, _x.tag, _x.size,) = _struct_d2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.raw_gyros = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.raw_gyros_110 = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.vbat_raw, _x.us_debut_echo, _x.us_fin_echo, _x.us_association_echo, _x.us_distance_echo, _x.us_courbe_temps, _x.us_courbe_valeur, _x.us_courbe_ref, _x.flag_echo_ini, _x.nb_echo, _x.sum_echo, _x.alt_temp_raw, _x.gradient,) = _struct_I9HIih.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d2H.pack(_x.drone_time, _x.tag, _x.size))
      length = len(self.raw_gyros)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.raw_gyros.tostring())
      length = len(self.raw_gyros_110)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.raw_gyros_110.tostring())
      _x = self
      buff.write(_struct_I9HIih.pack(_x.vbat_raw, _x.us_debut_echo, _x.us_fin_echo, _x.us_association_echo, _x.us_distance_echo, _x.us_courbe_temps, _x.us_courbe_valeur, _x.us_courbe_ref, _x.flag_echo_ini, _x.nb_echo, _x.sum_echo, _x.alt_temp_raw, _x.gradient))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.drone_time, _x.tag, _x.size,) = _struct_d2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.raw_gyros = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.raw_gyros_110 = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 32
      (_x.vbat_raw, _x.us_debut_echo, _x.us_fin_echo, _x.us_association_echo, _x.us_distance_echo, _x.us_courbe_temps, _x.us_courbe_valeur, _x.us_courbe_ref, _x.flag_echo_ini, _x.nb_echo, _x.sum_echo, _x.alt_temp_raw, _x.gradient,) = _struct_I9HIih.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d2H = struct.Struct("<d2H")
_struct_3I = struct.Struct("<3I")
_struct_I9HIih = struct.Struct("<I9HIih")
