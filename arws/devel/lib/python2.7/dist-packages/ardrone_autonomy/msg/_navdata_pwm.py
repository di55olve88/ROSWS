# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ardrone_autonomy/navdata_pwm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class navdata_pwm(genpy.Message):
  _md5sum = "6369e637a869960c68d7de5c2e10d6b1"
  _type = "ardrone_autonomy/navdata_pwm"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 drone_time
uint16 tag
uint16 size
uint8 motor1
uint8 motor2
uint8 motor3
uint8 motor4
uint8 sat_motor1
uint8 sat_motor2
uint8 sat_motor3
uint8 sat_motor4
float32 gaz_feed_forward
float32 gaz_altitude
float32 altitude_integral
float32 vz_ref
int32 u_pitch
int32 u_roll
int32 u_yaw
float32 yaw_u_I
int32 u_pitch_planif
int32 u_roll_planif
int32 u_yaw_planif
float32 u_gaz_planif
uint16 current_motor1
uint16 current_motor2
uint16 current_motor3
uint16 current_motor4
float32 altitude_der

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','drone_time','tag','size','motor1','motor2','motor3','motor4','sat_motor1','sat_motor2','sat_motor3','sat_motor4','gaz_feed_forward','gaz_altitude','altitude_integral','vz_ref','u_pitch','u_roll','u_yaw','yaw_u_I','u_pitch_planif','u_roll_planif','u_yaw_planif','u_gaz_planif','current_motor1','current_motor2','current_motor3','current_motor4','altitude_der']
  _slot_types = ['std_msgs/Header','float64','uint16','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','int32','int32','int32','float32','int32','int32','int32','float32','uint16','uint16','uint16','uint16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drone_time,tag,size,motor1,motor2,motor3,motor4,sat_motor1,sat_motor2,sat_motor3,sat_motor4,gaz_feed_forward,gaz_altitude,altitude_integral,vz_ref,u_pitch,u_roll,u_yaw,yaw_u_I,u_pitch_planif,u_roll_planif,u_yaw_planif,u_gaz_planif,current_motor1,current_motor2,current_motor3,current_motor4,altitude_der

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navdata_pwm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drone_time is None:
        self.drone_time = 0.
      if self.tag is None:
        self.tag = 0
      if self.size is None:
        self.size = 0
      if self.motor1 is None:
        self.motor1 = 0
      if self.motor2 is None:
        self.motor2 = 0
      if self.motor3 is None:
        self.motor3 = 0
      if self.motor4 is None:
        self.motor4 = 0
      if self.sat_motor1 is None:
        self.sat_motor1 = 0
      if self.sat_motor2 is None:
        self.sat_motor2 = 0
      if self.sat_motor3 is None:
        self.sat_motor3 = 0
      if self.sat_motor4 is None:
        self.sat_motor4 = 0
      if self.gaz_feed_forward is None:
        self.gaz_feed_forward = 0.
      if self.gaz_altitude is None:
        self.gaz_altitude = 0.
      if self.altitude_integral is None:
        self.altitude_integral = 0.
      if self.vz_ref is None:
        self.vz_ref = 0.
      if self.u_pitch is None:
        self.u_pitch = 0
      if self.u_roll is None:
        self.u_roll = 0
      if self.u_yaw is None:
        self.u_yaw = 0
      if self.yaw_u_I is None:
        self.yaw_u_I = 0.
      if self.u_pitch_planif is None:
        self.u_pitch_planif = 0
      if self.u_roll_planif is None:
        self.u_roll_planif = 0
      if self.u_yaw_planif is None:
        self.u_yaw_planif = 0
      if self.u_gaz_planif is None:
        self.u_gaz_planif = 0.
      if self.current_motor1 is None:
        self.current_motor1 = 0
      if self.current_motor2 is None:
        self.current_motor2 = 0
      if self.current_motor3 is None:
        self.current_motor3 = 0
      if self.current_motor4 is None:
        self.current_motor4 = 0
      if self.altitude_der is None:
        self.altitude_der = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.drone_time = 0.
      self.tag = 0
      self.size = 0
      self.motor1 = 0
      self.motor2 = 0
      self.motor3 = 0
      self.motor4 = 0
      self.sat_motor1 = 0
      self.sat_motor2 = 0
      self.sat_motor3 = 0
      self.sat_motor4 = 0
      self.gaz_feed_forward = 0.
      self.gaz_altitude = 0.
      self.altitude_integral = 0.
      self.vz_ref = 0.
      self.u_pitch = 0
      self.u_roll = 0
      self.u_yaw = 0
      self.yaw_u_I = 0.
      self.u_pitch_planif = 0
      self.u_roll_planif = 0
      self.u_yaw_planif = 0
      self.u_gaz_planif = 0.
      self.current_motor1 = 0
      self.current_motor2 = 0
      self.current_motor3 = 0
      self.current_motor4 = 0
      self.altitude_der = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d2H8B4f3if3if4Hf.pack(_x.drone_time, _x.tag, _x.size, _x.motor1, _x.motor2, _x.motor3, _x.motor4, _x.sat_motor1, _x.sat_motor2, _x.sat_motor3, _x.sat_motor4, _x.gaz_feed_forward, _x.gaz_altitude, _x.altitude_integral, _x.vz_ref, _x.u_pitch, _x.u_roll, _x.u_yaw, _x.yaw_u_I, _x.u_pitch_planif, _x.u_roll_planif, _x.u_yaw_planif, _x.u_gaz_planif, _x.current_motor1, _x.current_motor2, _x.current_motor3, _x.current_motor4, _x.altitude_der))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.drone_time, _x.tag, _x.size, _x.motor1, _x.motor2, _x.motor3, _x.motor4, _x.sat_motor1, _x.sat_motor2, _x.sat_motor3, _x.sat_motor4, _x.gaz_feed_forward, _x.gaz_altitude, _x.altitude_integral, _x.vz_ref, _x.u_pitch, _x.u_roll, _x.u_yaw, _x.yaw_u_I, _x.u_pitch_planif, _x.u_roll_planif, _x.u_yaw_planif, _x.u_gaz_planif, _x.current_motor1, _x.current_motor2, _x.current_motor3, _x.current_motor4, _x.altitude_der,) = _struct_d2H8B4f3if3if4Hf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d2H8B4f3if3if4Hf.pack(_x.drone_time, _x.tag, _x.size, _x.motor1, _x.motor2, _x.motor3, _x.motor4, _x.sat_motor1, _x.sat_motor2, _x.sat_motor3, _x.sat_motor4, _x.gaz_feed_forward, _x.gaz_altitude, _x.altitude_integral, _x.vz_ref, _x.u_pitch, _x.u_roll, _x.u_yaw, _x.yaw_u_I, _x.u_pitch_planif, _x.u_roll_planif, _x.u_yaw_planif, _x.u_gaz_planif, _x.current_motor1, _x.current_motor2, _x.current_motor3, _x.current_motor4, _x.altitude_der))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.drone_time, _x.tag, _x.size, _x.motor1, _x.motor2, _x.motor3, _x.motor4, _x.sat_motor1, _x.sat_motor2, _x.sat_motor3, _x.sat_motor4, _x.gaz_feed_forward, _x.gaz_altitude, _x.altitude_integral, _x.vz_ref, _x.u_pitch, _x.u_roll, _x.u_yaw, _x.yaw_u_I, _x.u_pitch_planif, _x.u_roll_planif, _x.u_yaw_planif, _x.u_gaz_planif, _x.current_motor1, _x.current_motor2, _x.current_motor3, _x.current_motor4, _x.altitude_der,) = _struct_d2H8B4f3if3if4Hf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_d2H8B4f3if3if4Hf = struct.Struct("<d2H8B4f3if3if4Hf")
